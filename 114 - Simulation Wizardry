‘’’
monta a matriz
‘’’
linha=input().split()
matriz=[[0 for x in range(int(linha[1])-1)]  for y in range(int(linha[0])-1)]
custoParede=int(input())
linha=int(input())
lstdirecoes=[[1,0],[0,1],[-1,0],[0,-1]]
‘’’
coloca bumpers na matriz
‘’’
for i in range(linha):
    linha=input().split()
    matriz[int(linha[0])-1][int(linha[1])-1]=[int(linha[2]),int(linha[3])]
‘’’
le e joga bolinhas
‘’’
linha=input().split()
pontosTotal=0
while len(linha)==4:
    vida=int(linha[3])
    x=int(linha[0])-1
    y=int(linha[1])-1
    direcao=int(linha[2])
    pontos=0
    while vida-1>0:
‘’’
enquanto a vida for maior que 1.
se andando na direção de proX(proximo valor de X) e proY(proximo valor de y) sair da matriz é garantido que bateu em uma parede e com isso deve virar 90º a esquerda e descontar 1 de ter tentado andar e o custo de bater na parede.
caso seja possivel andar é verificado se existe na posição seguinte um bumper ou não.
caso tenha bumper é verificado se com a perda de vida da bolinha ainda for maior que zero é descontado a vida e acrescentado o valor do bumper.
caso não haja bumper é somente descontado 1 pelo caminhar da bolinha.
‘’’
   	 proX=lstdirecoes[direcao][0]
   	 proY=lstdirecoes[direcao][1]
   	 
   	 print("\nx: ",x,"   ////prox: ",proX)
   	 print("y: ",y,"   ////proy: ",proY)
   	 print("vida",vida,"	////pontos: ",pontos)
   	 if x+proX<0 or x+proX>=len(matriz) or y+proY<0 or y+proY>=len(matriz[0]):
   		 vida-=custoParede
   		 vida-=1
   		 direcao-=1
   	 else:
   		 if matriz[x+proX][y+proY]!=0:
   			 direcao-=1
   			 if vida-matriz[x+proX][y+proY][1]>0:
   				 vida-=matriz[x+proX][y+proY][1]
   				 pontos+=matriz[x+proX][y+proY][0]
   				 vida-=1
   			 else:
   				 vida=0
   		 else:
   			 x+=proX
   			 y+=proY
   			 vida-=1
   	 if direcao==-1:
   		 direcao=3
‘’’
é mostrado o valor de cada bolinha.
‘’’
    pontosTotal+=pontos
    print(pontos)
    try:
   	 linha=input().split()
    except:
   	 break
print(pontosTotal)
